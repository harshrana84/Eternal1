{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _s = $RefreshSig$();\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useRef, useCallback, useEffect } from 'react';\nexport var isClient = !!(true && window.document && window.document.createElement);\n// export enum ScrollDirections {\n//   Horizontal,\n//   Vertical\n// }\n\nfunction scrollToPercent(el, _ref) {\n  var container = _ref.container,\n    percentOfElement = _ref.percentOfElement,\n    offsetPX = _ref.offsetPX,\n    direction = _ref.direction,\n    percentOfContainer = _ref.percentOfContainer;\n  var rect = el.current.getClientRects()[0];\n  var isVertical = direction === 'vertical';\n  var refSize = isVertical ? rect.height : rect.width;\n  var elemScroll = isVertical ? rect.y : rect.x;\n  var scrollSize = container === window ? isVertical ? container.innerHeight : container.innerWidth : isVertical ? container.scrollHeight : container.scrollWidth;\n  var addOffset = refSize * percentOfElement / 100;\n  if (offsetPX) {\n    addOffset += offsetPX;\n  }\n  var containerScroll = isVertical ? container.scrollY : container.scrollX;\n  var newScroll = containerScroll + elemScroll + (scrollSize * percentOfContainer / 100 + addOffset);\n  var scrollObj = isVertical ? {\n    top: newScroll\n  } : {\n    left: newScroll\n  };\n  window.scrollTo(_objectSpread(_objectSpread({}, scrollObj), {}, {\n    behavior: 'smooth'\n  }));\n}\n\n// interface ScrollOpts {\n//   /**\n//    * Offset in percentage of the element's client dimentions\n//    * default is to scroll to center the element in the scrolling pane, hence 50%\n//    */\n//   percentOfElement?: number;\n//   /**\n//    * The offset in pixels, whch will be added to the percentage of the element\n//    */\n//   offsetPX?: number;\n//   /**\n//    * Whether to run the scroll on mounting\n//    */\n//   onMount?: boolean;\n//   /**\n//    * The scrollable container in which the ref element is scrolling\n//    */\n//   container?: any;\n//   // default is the center of the scrolling container, hence 50%\n//   percentOfContainer?: number;\n//   direction?: ScrollDirections;\n// }\n\nexport function useRefScroll(_ref2) {\n  _s();\n  var _ref2$percentOfElemen = _ref2.percentOfElement,\n    percentOfElement = _ref2$percentOfElemen === void 0 ? 50 : _ref2$percentOfElemen,\n    _ref2$offsetPX = _ref2.offsetPX,\n    offsetPX = _ref2$offsetPX === void 0 ? 0 : _ref2$offsetPX,\n    _ref2$onMount = _ref2.onMount,\n    onMount = _ref2$onMount === void 0 ? false : _ref2$onMount,\n    _ref2$container = _ref2.container,\n    container = _ref2$container === void 0 ? isClient ? window : null : _ref2$container,\n    _ref2$percentOfContai = _ref2.percentOfContainer,\n    percentOfContainer = _ref2$percentOfContai === void 0 ? 50 : _ref2$percentOfContai,\n    _ref2$direction = _ref2.direction,\n    direction = _ref2$direction === void 0 ? 'vertical' : _ref2$direction;\n  var elRef = useRef(null);\n  var scroll = useCallback(function () {\n    if (elRef.current) {\n      scrollToPercent(elRef, {\n        percentOfElement: percentOfElement,\n        offsetPX: offsetPX,\n        container: container,\n        percentOfContainer: percentOfContainer,\n        direction: direction\n      });\n    }\n  }, [elRef.current]);\n  useEffect(function () {\n    if (onMount) {\n      scroll();\n    }\n  }, []);\n  return {\n    elRef: elRef,\n    scroll: scroll\n  };\n}\n\n// function MyComponent() {\n//   // using the hook without arguments will scroll the element to the center of the\n//   // window's viewport\n//   // alias elRef to myDiv for easier usage if having multiple elements\n//   // in the same component\n\n//   const { elRef: myDiv, scroll } = useRefScroller();\n\n//   return (\n//     <div>\n//       <button onClick={scroll}>Scroll</button>\n\n//       <div ref={myDiv}>\n//         `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum efficitur, massa vitae consectetur egestas, justo magna\n//         facilisis arcu, non accumsan lacus ipsum sit amet nisl.`\n//       </div>\n//     </div>\n//   );\n// }\n_s(useRefScroll, \"5PnGjK3jn8VGv+Xbq0YfIzStuRw=\");","map":{"version":3,"names":["useRef","useCallback","useEffect","isClient","window","document","createElement","scrollToPercent","el","_ref","container","percentOfElement","offsetPX","direction","percentOfContainer","rect","current","getClientRects","isVertical","refSize","height","width","elemScroll","y","x","scrollSize","innerHeight","innerWidth","scrollHeight","scrollWidth","addOffset","containerScroll","scrollY","scrollX","newScroll","scrollObj","top","left","scrollTo","_objectSpread","behavior","useRefScroll","_ref2","_s","_ref2$percentOfElemen","_ref2$offsetPX","_ref2$onMount","onMount","_ref2$container","_ref2$percentOfContai","_ref2$direction","elRef","scroll"],"sources":["C:/Photoshop2021x64/Github Repo/Eternal/src/helpers/use-ref-scroll.tsx"],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\nexport const isClient = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n// export enum ScrollDirections {\n//   Horizontal,\n//   Vertical\n// }\n\nfunction scrollToPercent(\n  el,\n  { container, percentOfElement, offsetPX, direction, percentOfContainer }\n) {\n  const rect = el.current.getClientRects()[0];\n  const isVertical = direction === 'vertical';\n  const refSize = isVertical ? rect.height : rect.width;\n  const elemScroll = isVertical ? rect.y : rect.x;\n\n  const scrollSize =\n    container === window\n      ? isVertical\n        ? container.innerHeight\n        : container.innerWidth\n      : isVertical\n      ? container.scrollHeight\n      : container.scrollWidth;\n\n  let addOffset = (refSize * percentOfElement) / 100;\n  if (offsetPX) {\n    addOffset += offsetPX;\n  }\n\n  const containerScroll = isVertical ? container.scrollY : container.scrollX;\n  const newScroll =\n    containerScroll +\n    elemScroll +\n    ((scrollSize * percentOfContainer) / 100 + addOffset);\n\n  const scrollObj = isVertical ? { top: newScroll } : { left: newScroll };\n\n  window.scrollTo({\n    ...scrollObj,\n    behavior: 'smooth',\n  });\n}\n\n// interface ScrollOpts {\n//   /**\n//    * Offset in percentage of the element's client dimentions\n//    * default is to scroll to center the element in the scrolling pane, hence 50%\n//    */\n//   percentOfElement?: number;\n//   /**\n//    * The offset in pixels, whch will be added to the percentage of the element\n//    */\n//   offsetPX?: number;\n//   /**\n//    * Whether to run the scroll on mounting\n//    */\n//   onMount?: boolean;\n//   /**\n//    * The scrollable container in which the ref element is scrolling\n//    */\n//   container?: any;\n//   // default is the center of the scrolling container, hence 50%\n//   percentOfContainer?: number;\n//   direction?: ScrollDirections;\n// }\n\nexport function useRefScroll({\n  percentOfElement = 50,\n  offsetPX = 0,\n  onMount = false,\n  container = isClient ? window : null,\n  percentOfContainer = 50,\n  direction = 'vertical',\n}) {\n  const elRef = useRef(null);\n\n  const scroll = useCallback(() => {\n    if (elRef.current) {\n      scrollToPercent(elRef, {\n        percentOfElement,\n        offsetPX,\n        container,\n        percentOfContainer,\n        direction,\n      });\n    }\n  }, [elRef.current]);\n\n  useEffect(() => {\n    if (onMount) {\n      scroll();\n    }\n  }, []);\n\n  return { elRef, scroll };\n}\n\n// function MyComponent() {\n//   // using the hook without arguments will scroll the element to the center of the\n//   // window's viewport\n//   // alias elRef to myDiv for easier usage if having multiple elements\n//   // in the same component\n\n//   const { elRef: myDiv, scroll } = useRefScroller();\n\n//   return (\n//     <div>\n//       <button onClick={scroll}>Scroll</button>\n\n//       <div ref={myDiv}>\n//         `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum efficitur, massa vitae consectetur egestas, justo magna\n//         facilisis arcu, non accumsan lacus ipsum sit amet nisl.`\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}