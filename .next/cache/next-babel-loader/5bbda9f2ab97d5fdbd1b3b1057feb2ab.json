{"ast":null,"code":"import { useMemo } from 'react';\nexport const useSearchable = (data, searchText, searchProps) => {\n  return useMemo(() => {\n    const regex = new RegExp(searchText, 'i');\n    return data.filter(item => searchProps(item).some(sp => regex.test(sp)));\n  }, [data, searchText, searchProps]);\n};\n// const useSearchable = <T>(data: T[], searchText: string, searchProps: (item: T) => string[]) => {\n//   return useMemo(() => {\n//     const regex = new RegExp(searchText, \"i\");\n//     return data.filter((item) =>\n//       searchProps(item).some((sp) => regex.test(sp))\n//     );\n//   }, [data, searchText, searchProps]);\n// };\n// export default useSearchable;","map":{"version":3,"names":["useMemo","useSearchable","data","searchText","searchProps","regex","RegExp","filter","item","some","sp","test"],"sources":["C:/Photoshop2021x64/Github Repo/Eternal/src/helpers/use-searchable.tsx"],"sourcesContent":["import { useMemo } from 'react';\nexport const useSearchable = (data, searchText, searchProps) => {\n  return useMemo(() => {\n    const regex = new RegExp(searchText, 'i');\n    return data.filter((item) =>\n      searchProps(item).some((sp) => regex.test(sp))\n    );\n  }, [data, searchText, searchProps]);\n};\n// const useSearchable = <T>(data: T[], searchText: string, searchProps: (item: T) => string[]) => {\n//   return useMemo(() => {\n//     const regex = new RegExp(searchText, \"i\");\n//     return data.filter((item) =>\n//       searchProps(item).some((sp) => regex.test(sp))\n//     );\n//   }, [data, searchText, searchProps]);\n// };\n// export default useSearchable;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,UAAU,EAAEC,WAAW,KAAK;EAC9D,OAAOJ,OAAO,CAAC,MAAM;IACnB,MAAMK,KAAK,GAAG,IAAIC,MAAM,CAACH,UAAU,EAAE,GAAG,CAAC;IACzC,OAAOD,IAAI,CAACK,MAAM,CAAEC,IAAI,IACtBJ,WAAW,CAACI,IAAI,CAAC,CAACC,IAAI,CAAEC,EAAE,IAAKL,KAAK,CAACM,IAAI,CAACD,EAAE,CAAC,CAC/C,CAAC;EACH,CAAC,EAAE,CAACR,IAAI,EAAEC,UAAU,EAAEC,WAAW,CAAC,CAAC;AACrC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}