{"ast":null,"code":"async function createOrder(data) {\n  if (!(process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL && process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY && process.env.GOOGLE_SPREADSHEET_ID_ORDER)) {\n    throw new Error('GOOGLE credentials must be set as env vars `GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL` ,`GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY` and `GOOGLE_SPREADSHEET_ID_ORDER`.');\n  }\n  const {\n    GoogleSpreadsheet\n  } = require('google-spreadsheet');\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_ORDER);\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL,\n    private_key: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY\n  });\n  await doc.loadInfo(); // loads document properties and worksheets\n  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\n\n  // append rows\n  await sheet.addRow(JSON.parse(data));\n}\nexport default async (req, res) => {\n  const {\n    method\n  } = req;\n  if (method === 'POST') {\n    await createOrder(req.body);\n    res.status(200).json({\n      message: `successfully added new order`\n    });\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).json({\n      message: `Method ${method} Not Allowed`\n    });\n  }\n};","map":{"version":3,"names":["createOrder","data","process","env","GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL","GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY","GOOGLE_SPREADSHEET_ID_ORDER","Error","GoogleSpreadsheet","require","doc","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsByIndex","addRow","JSON","parse","req","res","method","body","status","json","message","setHeader"],"sources":["C:/Photoshop2021x64/Github Repo/Eternal/src/pages/api/order.tsx"],"sourcesContent":["async function createOrder(data) {\n  if (\n    !(\n      process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL &&\n      process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY &&\n      process.env.GOOGLE_SPREADSHEET_ID_ORDER\n    )\n  ) {\n    throw new Error(\n      'GOOGLE credentials must be set as env vars `GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL` ,`GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY` and `GOOGLE_SPREADSHEET_ID_ORDER`.'\n    );\n  }\n\n  const { GoogleSpreadsheet } = require('google-spreadsheet');\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_ORDER);\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL,\n    private_key: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY,\n  });\n  await doc.loadInfo(); // loads document properties and worksheets\n  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\n\n  // append rows\n  await sheet.addRow(JSON.parse(data));\n}\nexport default async (req, res) => {\n  const { method } = req;\n  if (method === 'POST') {\n    await createOrder(req.body);\n    res.status(200).json({ message: `successfully added new order` });\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).json({ message: `Method ${method} Not Allowed` });\n  }\n};\n"],"mappings":"AAAA,eAAeA,WAAWA,CAACC,IAAI,EAAE;EAC/B,IACE,EACEC,OAAO,CAACC,GAAG,CAACC,mCAAmC,IAC/CF,OAAO,CAACC,GAAG,CAACE,kCAAkC,IAC9CH,OAAO,CAACC,GAAG,CAACG,2BAA2B,CACxC,EACD;IACA,MAAM,IAAIC,KAAK,CACb,2JACF,CAAC;EACH;EAEA,MAAM;IAAEC;EAAkB,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;EAC3D,MAAMC,GAAG,GAAG,IAAIF,iBAAiB,CAACN,OAAO,CAACC,GAAG,CAACG,2BAA2B,CAAC;EAC1E,MAAMI,GAAG,CAACC,qBAAqB,CAAC;IAC9BC,YAAY,EAAEV,OAAO,CAACC,GAAG,CAACC,mCAAmC;IAC7DS,WAAW,EAAEX,OAAO,CAACC,GAAG,CAACE;EAC3B,CAAC,CAAC;EACF,MAAMK,GAAG,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtB,MAAMC,KAAK,GAAGL,GAAG,CAACM,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEpC;EACA,MAAMD,KAAK,CAACE,MAAM,CAACC,IAAI,CAACC,KAAK,CAAClB,IAAI,CAAC,CAAC;AACtC;AACA,eAAe,OAAOmB,GAAG,EAAEC,GAAG,KAAK;EACjC,MAAM;IAAEC;EAAO,CAAC,GAAGF,GAAG;EACtB,IAAIE,MAAM,KAAK,MAAM,EAAE;IACrB,MAAMtB,WAAW,CAACoB,GAAG,CAACG,IAAI,CAAC;IAC3BF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE,CAAC,MAAM;IACLL,GAAG,CAACM,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;IAChCN,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,UAAUJ,MAAM;IAAe,CAAC,CAAC;EACnE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}