{"ast":null,"code":"export async function getProducts() {\n  if (!(process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL && process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY && process.env.GOOGLE_SPREADSHEET_ID_PRODUCT)) {\n    throw new Error('GOOGLE credentials must be set as env vars `GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL` ,`GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY` and `GOOGLE_SPREADSHEET_ID_PRODUCT`.');\n  }\n  const {\n    GoogleSpreadsheet\n  } = require('google-spreadsheet');\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_PRODUCT);\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL,\n    private_key: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY.replace(/\\\\n/gm, '\\n')\n  });\n  await doc.loadInfo(); // loads document properties and worksheets\n  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\n  // read rows\n  const rows = await sheet.getRows(); // can pass in { limit, offset }\n  const products = rows === null || rows === void 0 ? void 0 : rows.map(({\n    id,\n    name,\n    image,\n    description,\n    price,\n    manufacturer,\n    type,\n    quantity,\n    dosage,\n    substance\n  }) => ({\n    id,\n    name,\n    image,\n    description,\n    price,\n    manufacturer,\n    type,\n    quantity,\n    dosage,\n    substance\n  }));\n  return products;\n}","map":{"version":3,"names":["getProducts","process","env","GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL","GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY","GOOGLE_SPREADSHEET_ID_PRODUCT","Error","GoogleSpreadsheet","require","doc","useServiceAccountAuth","client_email","private_key","replace","loadInfo","sheet","sheetsByIndex","rows","getRows","products","map","id","name","image","description","price","manufacturer","type","quantity","dosage","substance"],"sources":["C:/Photoshop2021x64/Github Repo/Eternal/src/helpers/get-products.tsx"],"sourcesContent":["export async function getProducts() {\n  if (\n    !(\n      process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL &&\n      process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY &&\n      process.env.GOOGLE_SPREADSHEET_ID_PRODUCT\n    )\n  ) {\n    throw new Error(\n      'GOOGLE credentials must be set as env vars `GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL` ,`GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY` and `GOOGLE_SPREADSHEET_ID_PRODUCT`.'\n    );\n  }\n  const { GoogleSpreadsheet } = require('google-spreadsheet');\n  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SPREADSHEET_ID_PRODUCT);\n  await doc.useServiceAccountAuth({\n    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL,\n    private_key: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY.replace(\n      /\\\\n/gm,\n      '\\n'\n    ),\n  });\n  await doc.loadInfo(); // loads document properties and worksheets\n  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\n  // read rows\n  const rows = await sheet.getRows(); // can pass in { limit, offset }\n  const products = rows?.map(\n    ({\n      id,\n      name,\n      image,\n      description,\n      price,\n      manufacturer,\n      type,\n      quantity,\n      dosage,\n      substance,\n    }) => ({\n      id,\n      name,\n      image,\n      description,\n      price,\n      manufacturer,\n      type,\n      quantity,\n      dosage,\n      substance,\n    })\n  );\n  return products;\n}\n"],"mappings":"AAAA,OAAO,eAAeA,WAAWA,CAAA,EAAG;EAClC,IACE,EACEC,OAAO,CAACC,GAAG,CAACC,mCAAmC,IAC/CF,OAAO,CAACC,GAAG,CAACE,kCAAkC,IAC9CH,OAAO,CAACC,GAAG,CAACG,6BAA6B,CAC1C,EACD;IACA,MAAM,IAAIC,KAAK,CACb,6JACF,CAAC;EACH;EACA,MAAM;IAAEC;EAAkB,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;EAC3D,MAAMC,GAAG,GAAG,IAAIF,iBAAiB,CAACN,OAAO,CAACC,GAAG,CAACG,6BAA6B,CAAC;EAC5E,MAAMI,GAAG,CAACC,qBAAqB,CAAC;IAC9BC,YAAY,EAAEV,OAAO,CAACC,GAAG,CAACC,mCAAmC;IAC7DS,WAAW,EAAEX,OAAO,CAACC,GAAG,CAACE,kCAAkC,CAACS,OAAO,CACjE,OAAO,EACP,IACF;EACF,CAAC,CAAC;EACF,MAAMJ,GAAG,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtB,MAAMC,KAAK,GAAGN,GAAG,CAACO,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;EACpC;EACA,MAAMC,IAAI,GAAG,MAAMF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMC,QAAQ,GAAGF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,GAAG,CACxB,CAAC;IACCC,EAAE;IACFC,IAAI;IACJC,KAAK;IACLC,WAAW;IACXC,KAAK;IACLC,YAAY;IACZC,IAAI;IACJC,QAAQ;IACRC,MAAM;IACNC;EACF,CAAC,MAAM;IACLT,EAAE;IACFC,IAAI;IACJC,KAAK;IACLC,WAAW;IACXC,KAAK;IACLC,YAAY;IACZC,IAAI;IACJC,QAAQ;IACRC,MAAM;IACNC;EACF,CAAC,CACH,CAAC;EACD,OAAOX,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module"}